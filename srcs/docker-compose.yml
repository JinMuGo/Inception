version: '3.8'

services:
  mariadb:
    container_name: mariadb_app
    build: 
      context: ./requirements/mariadb
      dockerfile: ./Dockerfile
    image: mariadb
    pull_policy: never
    
    env_file:
      - ./.env
    
    networks:
      - docker_network 
    
    volumes:
      - mariadb_data:/var/lib/mysql
    
    restart: on-failure 
    
  wp_php:
    container_name: wp_php_app
    build: 
      context: ./requirements/wordpress
      dockerfile: ./Dockerfile
    image: wp_php
    pull_policy: never

    env_file:
      - ./.env

    networks:
      - docker_network 
    
    volumes:
      - wordpress_data:/var/www/html 

    depends_on:
      - mariadb

    restart: on-failure 
  nginx:
    container_name: nginx_app
    build:
      context: ./requirements/nginx
      dockerfile: ./Dockerfile
    image: nginx
    pull_policy: never
    
    env_file:
      - ./.env
    
    ports:
      - 443:443
    
    networks:
      - docker_network 
    
    volumes:
      - wordpress_data:/var/www/html

    depends_on:
      - mariadb
      - wp_php

    restart: on-failure 

  redis:
    container_name: redis_app
    build: 
      context: ./requirements/bonus/redis
      dockerfile: ./Dockerfile
    image: redis
    pull_policy: never

    env_file:
      - ./.env

    networks:
      - docker_network 

    volumes:
      - /data

    depends_on:
      - wp_php

    restart: on-failure 

  ftp_server:
    container_name: ftp_server_app
    build: 
      context: ./requirements/bonus/ftp_server
      dockerfile: ./Dockerfile
      args:
        FTP_USER: ${FTP_USER}
        FTP_PASSWORD: ${FTP_PASSWORD}
    image: ftp-server
    pull_policy: never

    env_file:
      - ./.env

    ports:
      - 21:21
      - 20:20
    
    networks:
      - docker_network 

    volumes:
      - wordpress_data:/home/vsftpd/${FTP_USER}
    
    depends_on:
      - mariadb
      - wp_php
      - redis

    restart: on-failure 
  website:
    container_name: website_app
    build: 
      context: ./requirements/bonus/website
      dockerfile: ./Dockerfile
    image: website
    pull_policy: never

    ports:
      - 3000:3000

    restart:  on-failure  
  adminer:
    container_name: adminer_app
    build:
     context: ./requirements/bonus/adminer
     dockerfile: ./Dockerfile
    image: adminer
    pull_policy: never

    ports:
      - 8000:80
    
    networks:
      - docker_network 
    
    depends_on:
      - mariadb

    restart: on-failure 
  
  prometheus:
    container_name: prometheus_app
    build:
      context: ./requirements/bonus/prometheus
      dockerfile: ./Dockerfile
    image: prometheus
    pull_policy: never

    ports:
      - 9090:9090
    
    networks:
      - docker_network 

    depends_on:
      - cadvisor
    restart: on-failure 

  cadvisor:
    container_name: cadvisor_app
    build:
      context: ./requirements/bonus/cadvisor
      dockerfile: ./Dockerfile
    image: cadvisor
    pull_policy: never

    ports:
      - 8080:8080

    networks:
      - docker_network 

    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

    restart: on-failure 
  grafana:
    container_name: grafana_app
    build:
      context: ./requirements/bonus/grafana
      dockerfile: ./Dockerfile
      args:
        GRA_USER: ${GRA_USER}
        GRA_PASSWORD: ${GRA_PASSWORD}
    image: grafana
    pull_policy: never

    ports:
      - 4242:4242

    env_file:
      - ./.env
    
    networks:
      - docker_network 

    volumes:
      - grafana_data:/usr/share/grafana

    depends_on:
      - prometheus
    # restart: on-failure 
volumes:
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      device: /home/${USER}/data/mariadb_data
      o: bind

  wordpress_data:
    driver: local
    driver_opts:
      type: none
      device: /home/${USER}/data/wordpress_data
      o: bind
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: /home/${USER}/data/prometheus_data
      o: bind
    
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: /home/${USER}/data/grafana_data
      o: bind

networks:
  docker_network:
    driver: bridge